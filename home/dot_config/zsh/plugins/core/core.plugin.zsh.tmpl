### Source: https://superuser.com/questions/902241/how-to-make-zsh-not-store-failed-command/902508#902508
 zshaddhistory() {
   local j=1
   while ([[ ${${(z)1}[$j]} == *=* ]]) {
     ((j++))
   }
   whence ${${(z)1}[$j]} >| /dev/null || return 1
 }

# Short-hand to grep all aliases available
search-aliases() {
  alias | grep "$1" --color
}

strict_mode(){
  if [[ "$1" != "off" ]]; then
    ## set -T # inherit DEBUG and RETURN trap for functions
    ## set -C # prevent file overwrite by > &> <>
    ## set -E # inherit -e
    ## set -e # exit immediately on errors
    ## set -u # exit on not assigned variables
    ## set -o pipefail # exit on pipe failure
    set +Ceuo pipefail
    _debug 'Strict mode enabled'
  else
    set +Ceuo pipefail
    _debug 'Strict mode disabled'
  fi
}

# Creates a temp file name and leverages it to swap to files "in place"
swap() {
  tmp_name=$(TMPDIR=$(dirname -- "$1") mktemp) &&
  mv -f -- "$1" "$tmp_name" &&
  mv -f -- "$2" "$1" &&
  mv -f -- "$tmp_name" "$2"
}

archive() {
  local archive_name="${1%/}.tar"
  print 'Creating tarball'
  tar -cf "${archive_name}" "$1"
  print "Compressing tarball into '${archive_name}.xz'"
  xz -9 --force "${archive_name}"
}

# Find process running on specified port
show-port() {
  lsof -P -n -i :"$1"
}

_debug() {
  if [[ -n $ZSH_DEBUG ]]; then
	  echo "[ZSH] $1"
  fi
}

list-path-dirs() {
  local output=$(sed "s/:/\n/g" <<< $PATH)
  awk '{print NR, "\t", $0}' <<< $output
}

# General
{{- if contains "darwin" .osID }}
alias ls='gls --color'
alias sed='gsed'
{{- end }}
alias l='ls -lh --group-directories-first -v'
alias la='ls -lhA --group-directories-first -v'
alias ld='ls -lhd --group-directories-first -v */'
alias lda='ls -lhd --group-directories-first -v */ .*/'
alias rm!='rm -rf'
alias edit='$EDITOR'

reload-shell() {
  if [[ $1 == "debug" ]]; then
    ZSH_DEBUG=true
  fi
  source $ZDOTDIR/.zshrc
}

# GPG Key Management
alias gen-gpg-key='gpg --full-generate-key --expert'

# Function to enable exporting GPG keys using FZF with enriched file names for backup purposes
backup-gpg() {
  local key_list
  key_list=$(gpg --list-keys --with-colons | awk -F: '/^pub:/ {print $5}')

  if [[ -z "$key_list" ]]; then
    echo "No GPG keys found. Aborting."
    return 1
  fi

  local selected_key
  selected_key=$(echo "$key_list" | fzf --prompt="Select GPG key: ")

  if [[ -z "$selected_key" ]]; then
    echo "No key selected. Aborting."
    return 1
  fi

  local backup_dir="$GNUPGHOME/backup"
  [[ ! -d "$backup_dir" ]] && mkdir -p "$backup_dir"

  local export_date=$(date +"%Y-%m-%d")
  local main_private_key_filename="${backup_dir}/${selected_key}_${export_date}.private.key"
  local main_public_key_filename="${backup_dir}/${selected_key}_${export_date}.public.asc"
  local subkey_private_key_filename="${backup_dir}/${selected_key}_subkeys_${export_date}.private.key"
  local trust_filename=${backup_dir}/owner_trust_${export_date}.txt"

  # Export the main public key
  gpg --export "$selected_key" > "$main_public_key_filename"

  # Export the main & subkey private keys
  gpg --export-secret-keys "$selected_key" > "$main_private_key_filename"
  gpg --export-secret-subkeys "$selected_key" > "$subkey_private_key_filename"

  # Export owner trust
  gpg --export-ownertrust > "$trust_filename"
  echo "Owner trust saved: $trust_filename"

  echo "Private & public keys exported to $backup_dir"
}

{{- if contains "darwin" .osID }}
alias gen-ssh-key='ssh-keygen -t ed25519 -C "$(whoami)@$(hostname)"'
{{- end }}

{{- if eq .osID "linux-arch" }}
alias open='xdg-open'
alias yeet='yay -Rns'
alias update='yay -Syu --devel'
alias gen-ssh-key='ssh-keygen -t ed25519 -C "$(whoami)@$(hostnamectl hostname)"'
{{- end }}

{{- if or (contains "debian" .osID) (contains "ubuntu" .osID) }}
alias update='sudo apt update -y && sudo apt upgrade -y'
{{- end }}
